plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id 'checkstyle'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.hamcrest:hamcrest-core:2.2'
	implementation 'org.wso2.appserver:wso2appserver-samples-tomcat-webapps-jdbc-data-source:5.3.0'
	implementation 'org.projectlombok:lombok:1.18.26'
	runtimeOnly 'org.postgresql:postgresql'

	//authentication security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.security:spring-security-test:5.6.2'

				//swagger2
	implementation 'io.springfox:springfox-swagger2:3.0.0'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'io.springfox:springfox-swagger-ui:3.0.0'

				//Testing
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.0.3'
	testImplementation 'junit:junit:4.13.2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'com.jayway.jsonpath:json-path-assert:2.2.0'
	testImplementation 'com.h2database:h2:2.1.210'

				//Liquibase
	implementation 'org.liquibase:liquibase-core:4.9.0'

				//JOOQ
	implementation 'org.jooq:jooq:3.13.6'

	implementation 'commons-io:commons-io:2.7'


}

test {
	finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
}
jacoco {
	toolVersion = "0.8.7"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.9
			}
		}
	}
}

checkstyle {
	toolVersion = "7.8.1"
	config = rootProject.resources.text.fromFile("config/checkstyle/checkstyle.xml")
}
checkstyleMain {
	source ='src/main/java'
}
checkstyleTest {
	source ='src/test/java'
}

tasks.named('test') {
	useJUnitPlatform()
}

jar {
	enabled = false
	manifest {
		attributes 'Main-Class': 'com.example.demoBook.DemoBookApplication'
	}
}
